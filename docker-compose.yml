services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: go-radio-postgres
    environment:
      POSTGRES_DB: go_radio
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - go-radio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d go_radio"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Go service
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY:-feline-dis/go-radio-v2}/backend:${IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-radio-backend
    ports:
      - "8080:8080"
      - "9090:9090" 
    env_file:
      - .env
    environment:
      - PORT=8080
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=go_radio
      - POSTGRES_SSLMODE=disable
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - go-radio-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React service
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY:-feline-dis/go-radio-v2}/frontend:${IMAGE_TAG:-latest}
    build:
      context: ./client
      dockerfile: Dockerfile
      target: dev
    container_name: go-radio-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8080}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - go-radio-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5173",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  go-radio-network:
    driver: bridge
