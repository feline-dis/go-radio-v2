name: Deploy to Environments

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options:
          - production
      image_tag:
        description: "Docker image tag to deploy (default: latest)"
        required: false
        default: "latest"
      force:
        description: "Force deployment even if no changes"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Add production server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to production server
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
          PRODUCTION_PATH: ${{ secrets.PRODUCTION_PATH }}
          IMAGE_TAG: ${{ github.event.inputs.image_tag || 'latest' }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          ssh $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
            cd $PRODUCTION_PATH
            export IMAGE_TAG=$IMAGE_TAG
            export GITHUB_REPOSITORY=$GITHUB_REPOSITORY
            
            # Create backup of current deployment
            echo "Creating backup..."
            docker-compose exec -T backend sqlite3 /app/data/radio.db ".backup /app/data/radio.db.backup.$(date +%Y%m%d_%H%M%S)" || true
            
            # Pull latest images
            docker-compose pull
            
            # Update environment variables if .env file exists
            if [ -f .env ]; then
              echo "Updating environment variables..."
              source .env
            fi
            
            # Deploy with new images
            docker-compose up -d
            
            # Wait for services to be healthy
            echo "Waiting for services to be ready..."
            sleep 30
            
            # Check service status
            docker-compose ps
            
            # Health check
            echo "Performing health checks..."
            curl -f http://localhost:8080/api/v1/health || exit 1
            curl -f http://localhost:3000/health || exit 1
            
            # Run smoke tests
            echo "Running smoke tests..."
            curl -f http://localhost:8080/api/v1/now-playing || exit 1
            
            echo "✅ Production deployment completed successfully!"
          EOF

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify Slack (if configured)
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            🚀 Go Radio v2 deployment to ${{ github.event.inputs.environment }} ${{ job.status == 'success' && '✅ succeeded' || '❌ failed' }}
            Environment: ${{ github.event.inputs.environment }}
            Image Tag: ${{ github.event.inputs.image_tag || 'latest' }}
            Triggered by: ${{ github.actor }}
            Commit: ${{ github.sha }}

      - name: Create deployment status
        if: always()
        run: |
          echo "Deployment to ${{ github.event.inputs.environment }} ${{ job.status == 'success' && 'succeeded' || 'failed' }}"
          echo "Image Tag: ${{ github.event.inputs.image_tag || 'latest' }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Commit: ${{ github.sha }}"
